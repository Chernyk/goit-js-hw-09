{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASG,kBAAkB,SACvCC,UAAWJ,SAASG,kBAAkB,QACtCE,YAAaL,SAASG,kBAAkB,UACxCG,OAAQN,SAASC,cAAc,iBAwBjC,SAASM,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA/BPX,EAAKQ,OAAOW,iBAAiB,SAC7B,SAAiBC,GACfA,EAAEC,iBAOF,IANA,IAEMC,EAAWC,OAAOvB,EAAKI,WAAW,GAAGoB,OACrCC,EAAUF,OAAOvB,EAAKM,UAAU,GAAGkB,OACnCE,EAAYH,OAAOvB,EAAKO,YAAY,GAAGiB,OAEpCG,EAAI,EAAGA,EAAID,EAAWC,IAG7BlB,EAFWkB,EAAI,EACPF,EAAUE,EAAIL,GAEnBM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBb,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAE9DsB,OAAM,SAAAJ,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBb,EAAAgC,OAAOI,QAAQ,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.getElementsByName('delay'),\n  stepInput: document.getElementsByName('step'),\n  amountInput: document.getElementsByName('amount'),\n  button: document.querySelector('.form>button'),\n};\nrefs.button.addEventListener('click', onClick);\nfunction onClick(e) {\n  e.preventDefault();\n  let position = 0;\n  let delay = 0;\n  const getDelay = Number(refs.delayInput[0].value);\n  const getStep = Number(refs.stepInput[0].value);\n  const getAmount = Number(refs.amountInput[0].value);\n\n  for (let i = 0; i < getAmount; i++) {\n    position = i + 1;\n    delay = getStep * i + getDelay;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((Fulfill, Reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        Fulfill({ position, delay });\n      } else {\n        Reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delayInput","getElementsByName","stepInput","amountInput","button","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","Fulfill","Reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","getDelay","Number","value","getStep","getAmount","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.8ef1a205.js.map"}